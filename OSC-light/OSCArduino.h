#pragma once

// OSC light implementation for Arduino

#include "OSCMessage.h"
#include "OSCMessageConsumer.h"
#include "OSCMessageProducer.h"

#ifdef _MSC_VER
#include "../OSC-lightUnitTest/Udp.h"
typedef unsigned int uint32_t;
#else
#include <Udp.h>
#endif

namespace OSC {
	class Arduino
	{
	public:
		Arduino() {}
		Arduino(int consumers, int producers) {
			_oscConsumers = new MessageConsumer*[consumers];
			_oscProducers = new MessageProducer*[producers];
		}

		// binds UDP handle to receive and send OSC messages 
		void bindUDP(UDP * udp, IPAddress remoteIP, int remotePort) {
			_udpHandle = udp;
			_remoteIP = remoteIP;
			_remotePort = remotePort;
		}

		// limits the message consumption to a single IP
		void consumeExclusivelyFrom(IPAddress remoteIP) {
			_exclusiveIP = remoteIP;
			_hasExclusiveIP = true;
		}

		// adds an OSC message consumer
		void addConsumer(MessageConsumer * consumer) {
			_oscConsumers[_consumers++] = consumer;
		}

		// adds an OSC message producer
		void addProducer(MessageProducer * producer) {
			_oscProducers[_producers++] = producer;
		}

		// main loop which uses UDP to read messages and feeds the UDP data to each consumer and sends messages generated by producers 
		void loop(bool send = true) {
			int i;
			int size;

			i = 0;

			// first, loop all producer's loop methods, then get all the messages out
			while (i < _producers) {

				_oscProducers[i]->loop();

				if (send) {
					Message * message = _oscProducers[i]->generateMessage();

					if (message->isSendableMessage()) {
						_udpHandle->beginPacket(_remoteIP, _remotePort);
						message->send(_udpHandle);
						_udpHandle->endPacket();
					}

					message->setValidData(false);
				}
				++i;
			}

			// then process all the messages in
			if (_consumers > 0) {
				if ((size = _udpHandle->parsePacket()) > 0) {

					// ignore messages which are not from a specific IP
					if (_hasExclusiveIP && _exclusiveIP != _udpHandle->remoteIP()) {
						return;
					}

					// make sure buffer is big enough
					bufferMessage.reserveBuffer(size);

					// write udp data to buffer
					_udpHandle->read(bufferMessage.processBuffer, size);

					// reuse the same message everytime to save repetitive memory allocations
					bufferMessage.process();

					i = 0;
					do {
						if (bufferMessage.isValidRoute(_oscConsumers[i]->pattern())) {
							_oscConsumers[i]->callbackMessage(&bufferMessage);
						}
					} while (++i < _consumers);

					_udpHandle->flush();
				}
			}
			else {
				_udpHandle->flush();
			}
		}

		Message bufferMessage = Message();

	private:
		UDP * _udpHandle;
		IPAddress _exclusiveIP;
		bool _hasExclusiveIP = false;

		MessageProducer ** _oscProducers;
		MessageConsumer ** _oscConsumers;

		IPAddress _remoteIP;
		int _remotePort;

		int _producers = 0;
		int _consumers = 0;
	};
}